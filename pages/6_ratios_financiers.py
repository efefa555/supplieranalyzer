import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from utils import (
    calculate_dpo, calculate_bfr, calculate_cash_ratio,
    calculate_current_ratio, create_gauge_chart
)

# Page configuration
st.set_page_config(
    page_title="Ratios Financiers",
    page_icon="üìà",
    layout="wide"
)

# Header
st.title("Ratios Financiers")
st.write("Analysez les indicateurs financiers li√©s aux paiements fournisseurs")

# Check if data exists in session state
if 'processed_data' not in st.session_state or st.session_state['processed_data'].empty:
    st.warning("Aucune donn√©e n'est charg√©e. Veuillez retourner √† la page principale pour charger des donn√©es.")
    st.stop()

# Get data from session state
data = st.session_state['processed_data']

# Inputs for financial ratio calculations
st.header("Donn√©es financi√®res pour le calcul des ratios")

col1, col2 = st.columns(2)

with col1:
    total_achats = st.number_input(
        "Total des achats fournisseurs TTC",
        min_value=0.0,
        value=float(data['Montant de la commande'].sum()),
        step=10000.0,
        format="%.2f",
        help="Montant total des achats sur la p√©riode"
    )
    
    total_dettes = st.number_input(
        "Total des dettes fournisseurs",
        min_value=0.0,
        value=float(data[data['Date de paiement'].isna()]['Montant de la commande'].sum()),
        step=10000.0,
        format="%.2f",
        help="Montant total des factures non r√©gl√©es"
    )

with col2:
    stock = st.number_input(
        "Valeur du stock",
        min_value=0.0,
        value=100000.0,
        step=10000.0,
        format="%.2f"
    )
    
    creances_clients = st.number_input(
        "Cr√©ances clients",
        min_value=0.0,
        value=75000.0,
        step=10000.0,
        format="%.2f"
    )

# Additional inputs for other ratios
col1, col2 = st.columns(2)

with col1:
    tresorerie = st.number_input(
        "Solde de tr√©sorerie",
        min_value=0.0,
        value=50000.0,
        step=10000.0,
        format="%.2f"
    )

with col2:
    actifs_court_terme = st.number_input(
        "Actifs √† court terme",
        min_value=0.0,
        value=stock + creances_clients + tresorerie,  # Pre-calculate based on previous inputs
        step=10000.0,
        format="%.2f",
        help="Total des actifs r√©alisables √† court terme (stock + cr√©ances + tr√©sorerie)"
    )
    
    passifs_court_terme = st.number_input(
        "Passifs √† court terme",
        min_value=0.0,
        value=total_dettes * 1.5,  # Estimate other current liabilities
        step=10000.0,
        format="%.2f",
        help="Total des dettes √† court terme (fournisseurs + autres dettes)"
    )

# Calculate ratios
st.header("Ratios financiers calcul√©s")

# Days Payable Outstanding (DPO)
dpo = calculate_dpo(total_dettes, total_achats)

# Besoin en Fonds de Roulement (BFR)
bfr = calculate_bfr(stock, creances_clients, total_dettes)

# Cash Ratio
cash_ratio = calculate_cash_ratio(tresorerie, total_dettes)

# Current Ratio
current_ratio = calculate_current_ratio(actifs_court_terme, passifs_court_terme)

# Display ratios in a 2x2 grid with gauge charts
col1, col2 = st.columns(2)

with col1:
    st.subheader("DPO (Days Payable Outstanding)")
    st.write("Nombre de jours moyen pour payer les fournisseurs")
    
    dpo_fig = create_gauge_chart(
        value=dpo,
        min_val=0,
        max_val=120,
        threshold_bad=30,  # Too quick payment
        threshold_good=60,  # Good payment time
        title="DPO (jours)"
    )
    st.plotly_chart(dpo_fig, use_container_width=True)
    
    st.markdown(f"""
    **Valeur calcul√©e: {dpo:.1f} jours**
    
    **Interpr√©tation:**
    - < 30 jours: Paiements trop rapides, impact n√©gatif sur la tr√©sorerie
    - 30-60 jours: Zone optimale pour la plupart des entreprises
    - > 60 jours: D√©lais longs, attention √† respecter la loi 69-21
    """)

with col2:
    st.subheader("BFR (Besoin en Fonds de Roulement)")
    st.write("Capital n√©cessaire pour financer le cycle d'exploitation")
    
    # For BFR, positive is generally considered less favorable
    bfr_fig = create_gauge_chart(
        value=bfr,
        min_val=-100000,
        max_val=300000,
        threshold_bad=200000,  # High BFR is challenging
        threshold_good=50000,  # Low BFR is good
        title="BFR (‚Ç¨)"
    )
    st.plotly_chart(bfr_fig, use_container_width=True)
    
    st.markdown(f"""
    **Valeur calcul√©e: {bfr:,.2f} ‚Ç¨**
    
    **Interpr√©tation:**
    - BFR positif: Besoin de financement pour le cycle d'exploitation
    - BFR n√©gatif: Exc√©dent de tr√©sorerie g√©n√©r√© par le cycle d'exploitation
    - Plus le BFR est bas, meilleure est la situation de tr√©sorerie
    """)

col1, col2 = st.columns(2)

with col1:
    st.subheader("Cash Ratio")
    st.write("Capacit√© √† rembourser les dettes √† court terme avec la tr√©sorerie disponible")
    
    cash_ratio_fig = create_gauge_chart(
        value=cash_ratio,
        min_val=0,
        max_val=2,
        threshold_bad=0.2,  # Low liquidity
        threshold_good=0.5,  # Good liquidity
        title="Cash Ratio"
    )
    st.plotly_chart(cash_ratio_fig, use_container_width=True)
    
    st.markdown(f"""
    **Valeur calcul√©e: {cash_ratio:.2f}**
    
    **Interpr√©tation:**
    - < 0.2: Liquidit√© insuffisante, risque de probl√®mes de paiement
    - 0.2-0.5: Liquidit√© acceptable
    - > 0.5: Bonne liquidit√©, capacit√© √† faire face aux obligations imm√©diates
    """)

with col2:
    st.subheader("Current Ratio")
    st.write("Capacit√© √† rembourser les dettes √† court terme avec l'ensemble des actifs √† court terme")
    
    current_ratio_fig = create_gauge_chart(
        value=current_ratio,
        min_val=0,
        max_val=3,
        threshold_bad=1,  # Below 1 is risky
        threshold_good=1.5,  # Above 1.5 is good
        title="Current Ratio"
    )
    st.plotly_chart(current_ratio_fig, use_container_width=True)
    
    st.markdown(f"""
    **Valeur calcul√©e: {current_ratio:.2f}**
    
    **Interpr√©tation:**
    - < 1: Risque d'incapacit√© √† honorer les dettes √† court terme
    - 1-1.5: Situation acceptable mais √† surveiller
    - > 1.5: Bonne capacit√© √† honorer les engagements √† court terme
    """)

# Historical trends
st.header("√âvolution historique des ratios")

st.write("""
Pour visualiser l'√©volution de ces ratios dans le temps, vous pouvez saisir des valeurs historiques ou pr√©visionnelles.
""")

# Create a table for historical data
if "historical_ratios" not in st.session_state:
    # Initialize with current values and some previous periods
    today = datetime.now()
    st.session_state["historical_ratios"] = pd.DataFrame([
        {"Date": (today - timedelta(days=90)).strftime("%Y-%m-%d"), "DPO": dpo * 0.9, "BFR": bfr * 1.1, "Cash Ratio": cash_ratio * 0.9, "Current Ratio": current_ratio * 0.9},
        {"Date": (today - timedelta(days=60)).strftime("%Y-%m-%d"), "DPO": dpo * 0.95, "BFR": bfr * 1.05, "Cash Ratio": cash_ratio * 0.95, "Current Ratio": current_ratio * 0.95},
        {"Date": (today - timedelta(days=30)).strftime("%Y-%m-%d"), "DPO": dpo * 0.98, "BFR": bfr * 1.02, "Cash Ratio": cash_ratio * 0.98, "Current Ratio": current_ratio * 0.98},
        {"Date": today.strftime("%Y-%m-%d"), "DPO": dpo, "BFR": bfr, "Cash Ratio": cash_ratio, "Current Ratio": current_ratio}
    ])

# Display the historical data table with editable cells
with st.expander("Donn√©es historiques des ratios"):
    edited_df = st.data_editor(
        st.session_state["historical_ratios"],
        use_container_width=True,
        num_rows="dynamic",
        column_config={
            "Date": st.column_config.DateColumn("Date", format="DD/MM/YYYY"),
            "DPO": st.column_config.NumberColumn("DPO (jours)", format="%.1f"),
            "BFR": st.column_config.NumberColumn("BFR (‚Ç¨)", format="%.2f"),
            "Cash Ratio": st.column_config.NumberColumn("Cash Ratio", format="%.2f"),
            "Current Ratio": st.column_config.NumberColumn("Current Ratio", format="%.2f")
        }
    )
    
    # Update the session state with the edited data
    st.session_state["historical_ratios"] = edited_df

# Sort by date for proper time series
historical_data = st.session_state["historical_ratios"].sort_values("Date")

# Create time series charts for each ratio
col1, col2 = st.columns(2)

with col1:
    # DPO time series
    fig_dpo = px.line(
        historical_data,
        x="Date",
        y="DPO",
        title="√âvolution du DPO",
        markers=True,
        labels={"DPO": "DPO (jours)", "Date": "Date"}
    )
    
    # Add reference lines
    fig_dpo.add_hline(
        y=30,
        line_dash="dash",
        line_color="orange",
        annotation_text="Minimum recommand√©",
        annotation_position="bottom right"
    )
    
    fig_dpo.add_hline(
        y=60,
        line_dash="dash",
        line_color="red",
        annotation_text="Maximum l√©gal",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_dpo, use_container_width=True)

with col2:
    # BFR time series
    fig_bfr = px.line(
        historical_data,
        x="Date",
        y="BFR",
        title="√âvolution du BFR",
        markers=True,
        labels={"BFR": "BFR (‚Ç¨)", "Date": "Date"}
    )
    
    # Add a reference line at 0
    fig_bfr.add_hline(
        y=0,
        line_dash="dash",
        line_color="gray",
        annotation_text="√âquilibre",
        annotation_position="bottom right"
    )
    
    st.plotly_chart(fig_bfr, use_container_width=True)

col1, col2 = st.columns(2)

with col1:
    # Cash Ratio time series
    fig_cash = px.line(
        historical_data,
        x="Date",
        y="Cash Ratio",
        title="√âvolution du Cash Ratio",
        markers=True,
        labels={"Cash Ratio": "Ratio", "Date": "Date"}
    )
    
    # Add reference lines
    fig_cash.add_hline(
        y=0.2,
        line_dash="dash",
        line_color="orange",
        annotation_text="Minimum critique",
        annotation_position="bottom right"
    )
    
    fig_cash.add_hline(
        y=0.5,
        line_dash="dash",
        line_color="green",
        annotation_text="Niveau optimal",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_cash, use_container_width=True)

with col2:
    # Current Ratio time series
    fig_current = px.line(
        historical_data,
        x="Date",
        y="Current Ratio",
        title="√âvolution du Current Ratio",
        markers=True,
        labels={"Current Ratio": "Ratio", "Date": "Date"}
    )
    
    # Add reference lines
    fig_current.add_hline(
        y=1,
        line_dash="dash",
        line_color="red",
        annotation_text="Minimum critique",
        annotation_position="bottom right"
    )
    
    fig_current.add_hline(
        y=1.5,
        line_dash="dash",
        line_color="green",
        annotation_text="Niveau optimal",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_current, use_container_width=True)

# Benchmark comparison
st.header("Comparaison avec les benchmarks sectoriels")

st.write("""
Comparez vos ratios financiers avec les r√©f√©rences de votre secteur pour √©valuer votre performance relative.
""")

# Let the user select their industry
industries = [
    "Commerce de d√©tail",
    "Commerce de gros",
    "Industrie manufacturi√®re",
    "Services aux entreprises",
    "Construction",
    "Transport et logistique",
    "Technologies de l'information",
    "Sant√©",
    "H√¥tellerie et restauration"
]

selected_industry = st.selectbox("S√©lectionnez votre secteur d'activit√©", industries)

# Benchmark data (example values - in a real app, this would come from a database)
benchmarks = {
    "Commerce de d√©tail": {"DPO": 45, "BFR": 120000, "Cash Ratio": 0.3, "Current Ratio": 1.2},
    "Commerce de gros": {"DPO": 52, "BFR": 200000, "Cash Ratio": 0.25, "Current Ratio": 1.3},
    "Industrie manufacturi√®re": {"DPO": 58, "BFR": 250000, "Cash Ratio": 0.2, "Current Ratio": 1.4},
    "Services aux entreprises": {"DPO": 42, "BFR": 80000, "Cash Ratio": 0.4, "Current Ratio": 1.6},
    "Construction": {"DPO": 55, "BFR": 180000, "Cash Ratio": 0.3, "Current Ratio": 1.3},
    "Transport et logistique": {"DPO": 48, "BFR": 150000, "Cash Ratio": 0.3, "Current Ratio": 1.4},
    "Technologies de l'information": {"DPO": 40, "BFR": 100000, "Cash Ratio": 0.5, "Current Ratio": 1.8},
    "Sant√©": {"DPO": 50, "BFR": 120000, "Cash Ratio": 0.35, "Current Ratio": 1.5},
    "H√¥tellerie et restauration": {"DPO": 35, "BFR": 60000, "Cash Ratio": 0.25, "Current Ratio": 1.1}
}

# Get benchmarks for selected industry
industry_benchmarks = benchmarks[selected_industry]

# Create comparison charts
col1, col2 = st.columns(2)

with col1:
    # DPO comparison
    fig_dpo_comp = go.Figure()
    
    fig_dpo_comp.add_trace(go.Bar(
        x=["Votre entreprise", "Benchmark sectoriel"],
        y=[dpo, industry_benchmarks["DPO"]],
        marker_color=["#1E88E5", "#FFC107"]
    ))
    
    fig_dpo_comp.update_layout(
        title="DPO: Comparaison avec le benchmark",
        yaxis_title="Jours",
        xaxis_title="",
        showlegend=False
    )
    
    st.plotly_chart(fig_dpo_comp, use_container_width=True)
    
    # Interpretation
    if dpo < industry_benchmarks["DPO"] * 0.8:
        st.warning("Votre DPO est significativement inf√©rieur √† la moyenne du secteur. Vous payez peut-√™tre trop rapidement vos fournisseurs.")
    elif dpo > industry_benchmarks["DPO"] * 1.2:
        st.warning("Votre DPO est significativement sup√©rieur √† la moyenne du secteur. Attention aux risques de non-conformit√© avec la loi 69-21.")
    else:
        st.success("Votre DPO est align√© avec les pratiques du secteur.")

with col2:
    # Cash Ratio comparison
    fig_cash_comp = go.Figure()
    
    fig_cash_comp.add_trace(go.Bar(
        x=["Votre entreprise", "Benchmark sectoriel"],
        y=[cash_ratio, industry_benchmarks["Cash Ratio"]],
        marker_color=["#1E88E5", "#FFC107"]
    ))
    
    fig_cash_comp.update_layout(
        title="Cash Ratio: Comparaison avec le benchmark",
        yaxis_title="Ratio",
        xaxis_title="",
        showlegend=False
    )
    
    st.plotly_chart(fig_cash_comp, use_container_width=True)
    
    # Interpretation
    if cash_ratio < industry_benchmarks["Cash Ratio"] * 0.8:
        st.warning("Votre Cash Ratio est inf√©rieur √† la moyenne du secteur. Votre liquidit√© imm√©diate pourrait √™tre insuffisante.")
    elif cash_ratio > industry_benchmarks["Cash Ratio"] * 1.5:
        st.info("Votre Cash Ratio est sup√©rieur √† la moyenne du secteur. Vous disposez d'une bonne liquidit√©, mais des ressources pourraient √™tre sous-utilis√©es.")
    else:
        st.success("Votre Cash Ratio est align√© avec les pratiques du secteur.")

col1, col2 = st.columns(2)

with col1:
    # Current Ratio comparison
    fig_current_comp = go.Figure()
    
    fig_current_comp.add_trace(go.Bar(
        x=["Votre entreprise", "Benchmark sectoriel"],
        y=[current_ratio, industry_benchmarks["Current Ratio"]],
        marker_color=["#1E88E5", "#FFC107"]
    ))
    
    fig_current_comp.update_layout(
        title="Current Ratio: Comparaison avec le benchmark",
        yaxis_title="Ratio",
        xaxis_title="",
        showlegend=False
    )
    
    st.plotly_chart(fig_current_comp, use_container_width=True)
    
    # Interpretation
    if current_ratio < industry_benchmarks["Current Ratio"] * 0.8:
        st.warning("Votre Current Ratio est inf√©rieur √† la moyenne du secteur. Votre solvabilit√© √† court terme pourrait √™tre √† risque.")
    elif current_ratio > industry_benchmarks["Current Ratio"] * 1.5:
        st.info("Votre Current Ratio est sup√©rieur √† la moyenne du secteur. Vous disposez d'une bonne solvabilit√© √† court terme.")
    else:
        st.success("Votre Current Ratio est align√© avec les pratiques du secteur.")

with col2:
    # BFR comparison normalized to company size
    # For simplicity, we'll normalize by dividing by total_achats
    normalized_bfr = bfr / total_achats if total_achats > 0 else 0
    normalized_benchmark_bfr = industry_benchmarks["BFR"] / (total_achats * 0.8)  # Assume benchmark is based on 80% of your activity
    
    fig_bfr_comp = go.Figure()
    
    fig_bfr_comp.add_trace(go.Bar(
        x=["Votre entreprise", "Benchmark sectoriel"],
        y=[normalized_bfr, normalized_benchmark_bfr],
        marker_color=["#1E88E5", "#FFC107"]
    ))
    
    fig_bfr_comp.update_layout(
        title="BFR/CA: Comparaison avec le benchmark",
        yaxis_title="Ratio BFR/Achats",
        xaxis_title="",
        showlegend=False
    )
    
    st.plotly_chart(fig_bfr_comp, use_container_width=True)
    
    # Interpretation
    if normalized_bfr > normalized_benchmark_bfr * 1.2:
        st.warning("Votre BFR est proportionnellement plus √©lev√© que la moyenne du secteur. Vous pourriez optimiser votre cycle d'exploitation.")
    elif normalized_bfr < normalized_benchmark_bfr * 0.8:
        st.success("Votre BFR est proportionnellement plus bas que la moyenne du secteur, ce qui est positif pour votre tr√©sorerie.")
    else:
        st.info("Votre BFR est proportionnellement align√© avec les pratiques du secteur.")

# Recommendations
st.header("Analyse et recommandations")

# Generate recommendations based on the ratios
recommendations = []

# DPO recommendations
if dpo < 30:
    recommendations.append("üî¥ **DPO trop bas**: N√©gociez des d√©lais de paiement plus longs avec vos fournisseurs pour am√©liorer votre tr√©sorerie.")
elif dpo > 60:
    recommendations.append("üî¥ **DPO √©lev√©**: Attention aux risques de non-conformit√© avec la loi 69-21. Planifiez vos paiements pour respecter les d√©lais l√©gaux.")
else:
    recommendations.append("üü¢ **DPO optimal**: Maintenez cette performance tout en respectant les d√©lais l√©gaux.")

# BFR recommendations
if bfr > 200000:
    recommendations.append("üî¥ **BFR √©lev√©**: R√©duisez votre BFR en optimisant vos stocks, en acc√©l√©rant le recouvrement client et en n√©gociant de meilleures conditions avec vos fournisseurs.")
elif bfr < 0:
    recommendations.append("üü° **BFR n√©gatif**: Bien que cela soit favorable pour votre tr√©sorerie, v√©rifiez que cette situation est durable et n'affecte pas vos relations fournisseurs.")
else:
    recommendations.append("üü¢ **BFR ma√Ætris√©**: Continuez √† surveiller l'√©volution de votre BFR pour maintenir cette performance.")

# Cash Ratio recommendations
if cash_ratio < 0.2:
    recommendations.append("üî¥ **Cash Ratio faible**: Augmentez vos liquidit√©s imm√©diatement disponibles pour faire face √† vos obligations √† court terme.")
elif cash_ratio > 1:
    recommendations.append("üü° **Cash Ratio tr√®s √©lev√©**: Vous disposez d'une tr√©sorerie importante qui pourrait √™tre mieux utilis√©e pour g√©n√©rer des rendements.")
else:
    recommendations.append("üü¢ **Cash Ratio satisfaisant**: Votre niveau de liquidit√© vous permet de faire face √† vos obligations √† court terme.")

# Current Ratio recommendations
if current_ratio < 1:
    recommendations.append("üî¥ **Current Ratio critique**: Votre capacit√© √† honorer vos dettes √† court terme est √† risque. Prenez des mesures pour augmenter vos liquidit√©s.")
elif current_ratio > 2:
    recommendations.append("üü° **Current Ratio tr√®s √©lev√©**: Vos actifs √† court terme pourraient √™tre utilis√©s de mani√®re plus productive.")
else:
    recommendations.append("üü¢ **Current Ratio satisfaisant**: Votre solvabilit√© √† court terme est bonne.")

# Display recommendations
for rec in recommendations:
    st.markdown(rec)

# Final summary and action plan
st.subheader("Plan d'action recommand√©")

st.markdown("""
### Actions prioritaires:

1. **Optimisation du DPO**:
   - √âtablir un calendrier de paiement align√© sur les d√©lais l√©gaux
   - N√©gocier des conditions de paiement favorables avec les fournisseurs strat√©giques

2. **R√©duction du BFR**:
   - Optimiser la gestion des stocks
   - Am√©liorer le processus de recouvrement des cr√©ances clients
   - Ren√©gocier les d√©lais fournisseurs dans le cadre l√©gal

3. **Suivi et reporting**:
   - Mettre en place un tableau de bord mensuel pour suivre l'√©volution des ratios
   - Comparer r√©guli√®rement vos performances avec les benchmarks sectoriels
   - Anticiper les besoins de tr√©sorerie en fonction des tendances observ√©es
""")

# Related resources
with st.expander("Ressources additionnelles"):
    st.markdown("""
    ### Pour approfondir:
    
    - **Loi 69-21**: Consultez les dispositions l√©gales sur les d√©lais de paiement
    - **Optimisation de la tr√©sorerie**: Guides pratiques pour am√©liorer votre gestion de tr√©sorerie
    - **Analyse financi√®re**: M√©thodes avanc√©es pour interpr√©ter vos ratios financiers
    
    ### Outils compl√©mentaires:
    
    - Budget de tr√©sorerie pr√©visionnel
    - Analyse de cr√©dit fournisseur
    - Simulation d'impact des d√©lais de paiement sur la performance financi√®re
    """)
