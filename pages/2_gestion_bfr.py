import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from utils import calculate_bfr

# Page configuration
st.set_page_config(
    page_title="Gestion du BFR",
    page_icon="ðŸ’°",
    layout="wide"
)

# Header
st.title("Gestion du Besoin en Fonds de Roulement (BFR)")
st.write("Analysez et suivez l'Ã©volution de votre BFR")

# Check if data exists in session state
if 'processed_data' not in st.session_state or st.session_state['processed_data'].empty:
    st.warning("Aucune donnÃ©e n'est chargÃ©e. Veuillez retourner Ã  la page principale pour charger des donnÃ©es.")
    st.stop()

# Get data from session state
data = st.session_state['processed_data']

# BFR calculation section
st.header("Calcul du BFR")

# Inputs for BFR calculation
col1, col2, col3 = st.columns(3)

with col1:
    stock = st.number_input("Valeur du stock", min_value=0.0, value=100000.0, step=1000.0, format="%.2f")

with col2:
    creances_clients = st.number_input("CrÃ©ances clients", min_value=0.0, value=75000.0, step=1000.0, format="%.2f")

with col3:
    # Calculate total supplier debt from the data
    dettes_fournisseurs_default = data['Montant de la commande'].sum() if not data.empty else 50000.0
    dettes_fournisseurs = st.number_input(
        "Dettes fournisseurs", 
        min_value=0.0, 
        value=dettes_fournisseurs_default, 
        step=1000.0, 
        format="%.2f"
    )

# Calculate BFR
bfr = calculate_bfr(stock, creances_clients, dettes_fournisseurs)

# Display BFR result
st.subheader("RÃ©sultat du calcul")
col1, col2 = st.columns([1, 2])

with col1:
    st.metric("BFR actuel", f"{bfr:,.2f} â‚¬")
    
    # Add interpretation
    if bfr > 0:
        st.info("BFR positif: Votre entreprise a besoin de financement pour son cycle d'exploitation.")
    elif bfr < 0:
        st.success("BFR nÃ©gatif: Votre entreprise dÃ©gage un excÃ©dent de trÃ©sorerie.")
    else:
        st.warning("BFR nul: Votre entreprise est Ã  l'Ã©quilibre.")

with col2:
    # Create a waterfall chart for BFR components
    fig = go.Figure(go.Waterfall(
        name="BFR",
        orientation="v",
        measure=["relative", "relative", "relative", "total"],
        x=["Stock", "CrÃ©ances clients", "Dettes fournisseurs", "BFR"],
        text=[f"+{stock:,.0f} â‚¬", f"+{creances_clients:,.0f} â‚¬", f"-{dettes_fournisseurs:,.0f} â‚¬", f"{bfr:,.0f} â‚¬"],
        textposition="outside",
        y=[stock, creances_clients, -dettes_fournisseurs, 0],
        connector={"line": {"color": "rgb(63, 63, 63)"}},
    ))
    
    fig.update_layout(
        title="Composition du BFR",
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)

# BFR evolution simulation
st.header("Simulation de l'Ã©volution du BFR")

# Input parameters for simulation
col1, col2, col3 = st.columns(3)

with col1:
    stock_growth = st.slider("Ã‰volution mensuelle du stock (%)", -10.0, 10.0, 1.0, 0.1)

with col2:
    creances_growth = st.slider("Ã‰volution mensuelle des crÃ©ances (%)", -10.0, 10.0, 1.5, 0.1)

with col3:
    dettes_growth = st.slider("Ã‰volution mensuelle des dettes (%)", -10.0, 10.0, 2.0, 0.1)

# Number of months to simulate
months = st.slider("Nombre de mois Ã  simuler", 3, 24, 12)

# Calculate BFR evolution
bfr_evolution = []
current_stock = stock
current_creances = creances_clients
current_dettes = dettes_fournisseurs

for i in range(months + 1):  # +1 to include the starting point
    current_bfr = calculate_bfr(current_stock, current_creances, current_dettes)
    
    bfr_evolution.append({
        'Mois': i,
        'Stock': current_stock,
        'CrÃ©ances clients': current_creances,
        'Dettes fournisseurs': current_dettes,
        'BFR': current_bfr
    })
    
    # Update values for next month
    current_stock *= (1 + stock_growth / 100)
    current_creances *= (1 + creances_growth / 100)
    current_dettes *= (1 + dettes_growth / 100)

# Convert to DataFrame
bfr_df = pd.DataFrame(bfr_evolution)

# Create visualizations
col1, col2 = st.columns(2)

with col1:
    # BFR evolution line chart
    fig_bfr = px.line(
        bfr_df,
        x='Mois',
        y='BFR',
        title="Ã‰volution du BFR sur la pÃ©riode",
        markers=True,
        labels={'BFR': 'BFR (â‚¬)', 'Mois': 'Mois'}
    )
    
    # Add a horizontal line at 0 for reference
    fig_bfr.add_hline(
        y=0,
        line_dash="dash",
        line_color="gray",
        annotation_text="Ã‰quilibre",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_bfr, use_container_width=True)

with col2:
    # Components evolution
    components_df = pd.melt(
        bfr_df, 
        id_vars=['Mois'], 
        value_vars=['Stock', 'CrÃ©ances clients', 'Dettes fournisseurs'],
        var_name='Composant', 
        value_name='Valeur'
    )
    
    fig_components = px.line(
        components_df,
        x='Mois',
        y='Valeur',
        color='Composant',
        title="Ã‰volution des composants du BFR",
        labels={'Valeur': 'Montant (â‚¬)', 'Mois': 'Mois'}
    )
    
    st.plotly_chart(fig_components, use_container_width=True)

# Display data table
st.subheader("DonnÃ©es dÃ©taillÃ©es de la simulation")
st.dataframe(bfr_df.round(2), use_container_width=True)

# Strategies to optimize BFR
st.header("StratÃ©gies d'optimisation du BFR")

st.markdown("""
### Recommandations pour optimiser votre BFR:

#### Pour rÃ©duire le BFR (libÃ©rer de la trÃ©sorerie):

1. **Gestion des stocks:**
   - Optimiser les niveaux de stock
   - Mettre en place un systÃ¨me just-in-time
   - NÃ©gocier des dÃ©lais de livraison plus courts avec les fournisseurs

2. **Gestion des crÃ©ances clients:**
   - RÃ©duire les dÃ©lais de paiement accordÃ©s aux clients
   - Mettre en place des incitations pour les paiements anticipÃ©s
   - Facturer plus rapidement
   - Suivre activement les relances

3. **Gestion des dettes fournisseurs:**
   - NÃ©gocier des dÃ©lais de paiement plus longs (tout en respectant la loi 69-21)
   - Centraliser les achats pour obtenir de meilleures conditions
   - Planifier les paiements de maniÃ¨re stratÃ©gique

#### Si le BFR est nÃ©gatif:

- VÃ©rifier que cette situation ne rÃ©sulte pas d'un dÃ©sÃ©quilibre temporaire
- S'assurer que les relations avec les fournisseurs restent saines
- Ã‰valuer si ce surplus de trÃ©sorerie peut Ãªtre investi efficacement

### Impact sur la trÃ©sorerie:

Une rÃ©duction du BFR de 10% pourrait libÃ©rer environ **{bfr * 0.1:,.2f} â‚¬** de trÃ©sorerie supplÃ©mentaire pour votre entreprise.
""")

# Final note
st.info("""
**Note importante:** Les calculs et simulations prÃ©sentÃ©s ici sont des estimations basÃ©es sur les donnÃ©es fournies et les hypothÃ¨ses d'Ã©volution. 
Ils servent Ã  visualiser les tendances potentielles, mais doivent Ãªtre complÃ©tÃ©s par une analyse financiÃ¨re plus approfondie.
""")
