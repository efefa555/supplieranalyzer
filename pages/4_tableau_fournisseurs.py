import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Page configuration
st.set_page_config(
    page_title="Tableau Fournisseurs",
    page_icon="ğŸ‘¥",
    layout="wide"
)

# Header
st.title("Tableau de Bord Fournisseurs")
st.write("Analysez la rÃ©partition des achats et dettes par fournisseur")

# Check if data exists in session state
if 'processed_data' not in st.session_state or st.session_state['processed_data'].empty:
    st.warning("Aucune donnÃ©e n'est chargÃ©e. Veuillez retourner Ã  la page principale pour charger des donnÃ©es.")
    st.stop()

# Get data from session state
data = st.session_state['processed_data']

# Calculate penalties if not already done
if 'Montant pÃ©nalitÃ©' not in data.columns:
    # We'll assume a standard delay of 60 days and an interest rate of 3%
    standard_delay = 60
    interest_rate = 0.03
    
    # Calculate days of delay beyond standard
    data['Jours de retard'] = data['DÃ©lai de paiement'].apply(
        lambda x: max(0, x - standard_delay)
    )
    
    # Calculate penalty amount
    data['Montant pÃ©nalitÃ©'] = (
        data['Montant de la commande'] * 
        interest_rate * 
        data['Jours de retard']
    ) / 365

# Calculate unpaid amounts (we'll assume a payment is unpaid if the payment date is missing)
data['Statut de la commande'] = data['Date de paiement'].apply(
    lambda x: 'PayÃ©e' if pd.notna(x) else 'Non payÃ©e'
)

# Sidebar filters
with st.sidebar:
    st.header("Filtres")
    
    # Filter by date range
    date_min = data['Date de commande'].min()
    date_max = data['Date de commande'].max()
    
    date_range = st.date_input(
        "PÃ©riode",
        [date_min, date_max],
        min_value=date_min,
        max_value=date_max
    )
    
    # Filter by payment status
    payment_statuses = ["Tous", "PayÃ©e", "Non payÃ©e"]
    selected_payment_status = st.selectbox("Statut de la commande", payment_statuses)
    
    # Apply filters
    filtered_data = data.copy()
    
    if len(date_range) == 2:
        filtered_data = filtered_data[
            (filtered_data['Date de commande'] >= pd.to_datetime(date_range[0])) &
            (filtered_data['Date de commande'] <= pd.to_datetime(date_range[1]))
        ]
    
    if selected_payment_status != "Tous":
        filtered_data = filtered_data[filtered_data['Statut de la commande'] == selected_payment_status]

# Main content
# Top-level metrics
st.header("AperÃ§u gÃ©nÃ©ral")

col1, col2, col3, col4 = st.columns(4)

with col1:
    total_suppliers = filtered_data['Nom du fournisseur'].nunique()
    st.metric("Nombre de fournisseurs", total_suppliers)

with col2:
    total_orders = filtered_data.shape[0]
    st.metric("Nombre de commandes", total_orders)

with col3:
    total_amount = filtered_data['Montant de la commande'].sum()
    st.metric("Montant total des commandes", f"{total_amount:,.2f} â‚¬")

with col4:
    unpaid_amount = filtered_data[filtered_data['Statut de la commande'] == 'Non payÃ©e']['Montant de la commande'].sum()
    st.metric("Montant non payÃ©", f"{unpaid_amount:,.2f} â‚¬")

# Supplier analysis section
st.header("Analyse par fournisseur")

# Prepare data for charts
supplier_metrics = filtered_data.groupby('Nom du fournisseur').agg({
    'Montant de la commande': 'sum',
    'DÃ©lai de paiement': 'mean',
    'Montant pÃ©nalitÃ©': 'sum',
    'Statut de la commande': lambda x: (x == 'Non payÃ©e').mean() * 100  # Percentage of unpaid orders
}).reset_index()

supplier_metrics.columns = [
    'Nom du fournisseur', 
    'Montant total', 
    'DÃ©lai moyen de paiement', 
    'PÃ©nalitÃ©s totales',
    'Pourcentage non payÃ©'
]

# Sort by total amount for visualization
supplier_metrics = supplier_metrics.sort_values('Montant total', ascending=False)

# Create 2x2 dashboard with different charts
col1, col2 = st.columns(2)

with col1:
    # 1. Bar chart for order amounts by supplier
    fig_amount = px.bar(
        supplier_metrics,
        x='Nom du fournisseur',
        y='Montant total',
        title="Chiffre d'affaires par fournisseur",
        color='Montant total',
        color_continuous_scale=px.colors.sequential.Blues,
        labels={'Montant total': 'Montant total (â‚¬)', 'Nom du fournisseur': 'Fournisseur'}
    )
    st.plotly_chart(fig_amount, use_container_width=True)

with col2:
    # 2. Pie chart for proportion of total purchases by supplier
    fig_pie = px.pie(
        supplier_metrics,
        values='Montant total',
        names='Nom du fournisseur',
        title="RÃ©partition des achats par fournisseur",
        hole=0.4
    )
    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_pie, use_container_width=True)

col1, col2 = st.columns(2)

with col1:
    # 3. Bar chart for average payment delay by supplier
    fig_delay = px.bar(
        supplier_metrics.sort_values('DÃ©lai moyen de paiement', ascending=False),
        x='Nom du fournisseur',
        y='DÃ©lai moyen de paiement',
        title="DÃ©lai moyen de paiement par fournisseur",
        color='DÃ©lai moyen de paiement',
        color_continuous_scale=px.colors.sequential.Reds,
        labels={'DÃ©lai moyen de paiement': 'Jours', 'Nom du fournisseur': 'Fournisseur'}
    )
    
    # Add a horizontal line for the standard delay (e.g., 60 days)
    fig_delay.add_hline(
        y=60,
        line_dash="dash",
        line_color="red",
        annotation_text="DÃ©lai standard (60 jours)",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_delay, use_container_width=True)

with col2:
    # 4. Scatter plot relating total amount to payment delay
    fig_scatter = px.scatter(
        supplier_metrics,
        x='Montant total',
        y='DÃ©lai moyen de paiement',
        size='PÃ©nalitÃ©s totales',
        color='Pourcentage non payÃ©',
        hover_name='Nom du fournisseur',
        title="Relation entre montant, dÃ©lai et pÃ©nalitÃ©s",
        labels={
            'Montant total': 'Montant total (â‚¬)',
            'DÃ©lai moyen de paiement': 'DÃ©lai moyen (jours)',
            'Pourcentage non payÃ©': '% non payÃ©'
        }
    )
    
    # Add a horizontal line for the standard delay
    fig_scatter.add_hline(
        y=60,
        line_dash="dash",
        line_color="red",
        annotation_text="DÃ©lai standard",
        annotation_position="top right"
    )
    
    st.plotly_chart(fig_scatter, use_container_width=True)

# Supplier KPI table
st.header("Indicateurs clÃ©s par fournisseur")

# Calculate additional metrics
supplier_counts = filtered_data.groupby('Nom du fournisseur').size().reset_index(name='Nombre de commandes')
supplier_late_payments = filtered_data[filtered_data['Statut du paiement'] == 'En retard'].groupby('Nom du fournisseur').size().reset_index(name='Commandes en retard')
supplier_unpaid = filtered_data[filtered_data['Statut de la commande'] == 'Non payÃ©e'].groupby('Nom du fournisseur')['Montant de la commande'].sum().reset_index(name='Montant non payÃ©')

# Merge all metrics
supplier_kpis = supplier_metrics.merge(supplier_counts, on='Nom du fournisseur', how='left')
supplier_kpis = supplier_kpis.merge(supplier_late_payments, on='Nom du fournisseur', how='left')
supplier_kpis = supplier_kpis.merge(supplier_unpaid, on='Nom du fournisseur', how='left')

# Fill NaN values with 0
supplier_kpis['Commandes en retard'] = supplier_kpis['Commandes en retard'].fillna(0)
supplier_kpis['Montant non payÃ©'] = supplier_kpis['Montant non payÃ©'].fillna(0)

# Calculate late payment rate
supplier_kpis['Taux de retard (%)'] = (supplier_kpis['Commandes en retard'] / supplier_kpis['Nombre de commandes'] * 100).round(1)

# Select and order columns for display
display_cols = [
    'Nom du fournisseur',
    'Nombre de commandes',
    'Montant total',
    'Montant non payÃ©',
    'DÃ©lai moyen de paiement',
    'Taux de retard (%)',
    'PÃ©nalitÃ©s totales'
]

# Sort by total amount by default
supplier_kpis_sorted = supplier_kpis[display_cols].sort_values('Montant total', ascending=False)

# Display the table
st.dataframe(supplier_kpis_sorted.style.format({
    'Montant total': '{:,.2f} â‚¬',
    'Montant non payÃ©': '{:,.2f} â‚¬',
    'DÃ©lai moyen de paiement': '{:.1f} jours',
    'PÃ©nalitÃ©s totales': '{:,.2f} â‚¬'
}), use_container_width=True)

# Supplier risk analysis
st.header("Analyse des risques fournisseurs")

# Create a risk score based on multiple factors
supplier_kpis['Score de risque'] = (
    # High weight for late payment rate
    supplier_kpis['Taux de retard (%)'] * 0.4 +
    # Medium weight for percentage unpaid
    supplier_kpis['Pourcentage non payÃ©'] * 0.3 +
    # Lower weight for average delay over 60 days
    (supplier_kpis['DÃ©lai moyen de paiement'].apply(lambda x: max(0, x - 60)) / 10) * 0.3
).round(1)

# Categorize suppliers based on risk score
def risk_category(score):
    if score < 15:
        return 'Faible'
    elif score < 35:
        return 'Moyen'
    else:
        return 'Ã‰levÃ©'

supplier_kpis['CatÃ©gorie de risque'] = supplier_kpis['Score de risque'].apply(risk_category)

# Create a visualization of risk
fig_risk = px.bar(
    supplier_kpis.sort_values('Score de risque', ascending=False),
    x='Nom du fournisseur',
    y='Score de risque',
    color='CatÃ©gorie de risque',
    title="Score de risque par fournisseur",
    color_discrete_map={
        'Faible': 'green',
        'Moyen': 'orange',
        'Ã‰levÃ©': 'red'
    },
    labels={'Score de risque': 'Score de risque (0-100)', 'Nom du fournisseur': 'Fournisseur'}
)

st.plotly_chart(fig_risk, use_container_width=True)

# Display top-risk suppliers
high_risk_suppliers = supplier_kpis[supplier_kpis['CatÃ©gorie de risque'] == 'Ã‰levÃ©']

if not high_risk_suppliers.empty:
    st.subheader("Fournisseurs Ã  risque Ã©levÃ©")
    st.dataframe(
        high_risk_suppliers[['Nom du fournisseur', 'Score de risque', 'Montant total', 'Taux de retard (%)', 'Pourcentage non payÃ©']].style.format({
            'Montant total': '{:,.2f} â‚¬',
            'Taux de retard (%)': '{:.1f}%',
            'Pourcentage non payÃ©': '{:.1f}%'
        }),
        use_container_width=True
    )
    
    st.warning("""
    **Attention!** Les fournisseurs Ã  risque Ã©levÃ© doivent faire l'objet d'une attention particuliÃ¨re:
    
    - RÃ©Ã©valuer les conditions de paiement
    - PrÃ©voir des plans d'action pour rÃ©duire les retards
    - Initier un dialogue pour amÃ©liorer les relations commerciales
    """)
else:
    st.success("Aucun fournisseur n'est actuellement classÃ© en risque Ã©levÃ©.")

# Recommendations section
st.header("Recommandations")

st.markdown("""
### StratÃ©gies de gestion fournisseurs

#### Pour les fournisseurs stratÃ©giques (montants Ã©levÃ©s):
- PrivilÃ©gier des accords cadres avec planification des paiements
- Mettre en place un suivi spÃ©cifique pour Ã©viter les retards
- NÃ©gocier des conditions avantageuses en contrepartie de paiements rÃ©guliers

#### Pour rÃ©duire les retards de paiement:
- Mettre en place des alertes automatiques avant Ã©chÃ©ance
- Optimiser le processus d'approbation des factures
- PrÃ©voir des dates fixes de paiement pour une meilleure planification

#### Pour amÃ©liorer la performance globale:
- Concentrer les achats sur moins de fournisseurs pour obtenir de meilleures conditions
- Ã‰tablir des KPIs de performance par fournisseur et les suivre rÃ©guliÃ¨rement
- Ã‰valuer pÃ©riodiquement la valeur ajoutÃ©e de chaque relation fournisseur
""")
